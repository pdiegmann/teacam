#!/usr/bin/env bash
# This script was generated by bashly 1.0.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required!

	brew install bash

\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
teacam_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam - Teaching Camunda Helper Script\n"
    echo

  else
    printf "teacam - Teaching Camunda Helper Script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  teacam COMMAND\n"
  printf "  teacam [COMMAND] --help | -h\n"
  printf "  teacam --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   delete old users and import new ones\n" "new-dawn"
  printf "  %s   Anything related to the users accessing Camdunda as part of the teaching organization\n" "users   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "CAMUNDA_CONSOLE_CLIENT_ID (required)"
    printf "    Set your API Client ID\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "CAMUNDA_CONSOLE_CLIENT_SECRET (required)"
    printf "    Set your API Client Secret\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "CAMUNDA_OAUTH_URL"
    printf "    Set the matching oAuth URL\n"
    printf "    Default: https://login.cloud.camunda.io/oauth/token\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "CAMUNDA_CONSOLE_BASE_URL"
    printf "    Set the matching Console URL\n"
    printf "    Default: https://api.cloud.camunda.io\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "CAMUNDA_CONSOLE_OAUTH_AUDIENCE"
    printf "    Set the matching Console oAuth Audience\n"
    printf "    Default: api.cloud.camunda.io\n"
    echo

  fi
}

# :command.usage
teacam_new_dawn_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam new-dawn - delete old users and import new ones\n"
    echo

  else
    printf "teacam new-dawn - delete old users and import new ones\n"
    echo

  fi

  printf "Alias: nd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  teacam new-dawn FILE\n"
  printf "  teacam new-dawn --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILE"
    printf "    file to import from\n"
    echo

  fi
}

# :command.usage
teacam_users_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam users - Anything related to the users accessing Camdunda as part of the teaching organization\n"
    echo

  else
    printf "teacam users - Anything related to the users accessing Camdunda as part of the teaching organization\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  teacam users COMMAND\n"
  printf "  teacam users [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   list users (default)\n" "list             "
  printf "  %s   delete user by mail\n" "delete           "
  printf "  %s   deletes all users who are not of role owner\n" "delete-non-owners"
  printf "  %s   invite user by mail\n" "invite           "
  printf "  %s   import users by mail, line by line\n" "import           "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
teacam_users_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam users list - list users\n"
    echo

  else
    printf "teacam users list - list users\n"
    echo

  fi

  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  teacam users list\n"
  printf "  teacam users list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
teacam_users_delete_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam users delete - delete user by mail\n"
    echo

  else
    printf "teacam users delete - delete user by mail\n"
    echo

  fi

  printf "Alias: del\n"
  echo

  printf "%s\n" "Usage:"
  printf "  teacam users delete MAIL\n"
  printf "  teacam users delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "MAIL"
    printf "    mail address\n"
    echo

  fi
}

# :command.usage
teacam_users_delete_non_owners_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam users delete-non-owners - deletes all users who are not of role owner\n"
    echo

  else
    printf "teacam users delete-non-owners - deletes all users who are not of role owner\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  teacam users delete-non-owners\n"
  printf "  teacam users delete-non-owners --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
teacam_users_invite_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam users invite - invite user by mail\n"
    echo

  else
    printf "teacam users invite - invite user by mail\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  teacam users invite MAIL\n"
  printf "  teacam users invite --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "MAIL"
    printf "    mail address\n"
    echo

  fi
}

# :command.usage
teacam_users_import_usage() {
  if [[ -n $long_usage ]]; then
    printf "teacam users import - import users by mail, line by line\n"
    echo

  else
    printf "teacam users import - import users by mail, line by line\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  teacam users import FILE\n"
  printf "  teacam users import --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILE"
    printf "    file to import from\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# :command.command_functions
# :command.function
teacam_new_dawn_command() {
  # src/new_dawn_command.sh
  echo $(./$0 users delete-non-owners)
  echo $(./$0 users import ${args[file]})
}

# :command.function
teacam_users_list_command() {
  # src/users_list_command.sh
  curl -s -f --request GET \
    --url ${CAMUNDA_CONSOLE_BASE_URL}/members \
    --header "Authorization: Bearer ${CAMUNDA_OAUTH_TOKEN}"
}

# :command.function
teacam_users_delete_command() {
  # src/users_delete_command.sh
  curl -s -f --request DELETE \
    --url ${CAMUNDA_CONSOLE_BASE_URL}/members/${args[mail]} \
    --header "Authorization: Bearer ${CAMUNDA_OAUTH_TOKEN}"
}

# :command.function
teacam_users_delete_non_owners_command() {
  # src/users_delete_non_owners_command.sh
  list=$(curl -s -f --request GET \
    --url ${CAMUNDA_CONSOLE_BASE_URL}/members \
    --header "Authorization: Bearer ${CAMUNDA_OAUTH_TOKEN}" | jq -c '. - map(select(.roles[] | contains ("owner"))) | .[] .email')

  i=0
  for email in "${list[@]}"
  do
    ((i=i+1))
    echo -ne "[INFO] Processing ${i}/${${#list[@]}}: ${email}}\033[0K\r"
    curl -s -f --request DELETE \
      --url ${CAMUNDA_CONSOLE_BASE_URL}/members/${email} \
      --header "Authorization: Bearer ${CAMUNDA_OAUTH_TOKEN}"
  done
  echo "\n\nDONE."
}

# :command.function
teacam_users_invite_command() {
  # src/users_invite_command.sh
  curl -s -f --request POST \
    --url ${CAMUNDA_CONSOLE_BASE_URL}/members/${args[mail]} \
    --header "Authorization: Bearer ${CAMUNDA_OAUTH_TOKEN}" \
    --header "Content-Type: application/json" \
    --data "{\"orgRoles\": [\"developer\", \"analyst\"]}"
}

# :command.function
teacam_users_import_command() {
  # src/users_import_command.sh
  lines=$(cat ${args[file]} | sed '/^\s*$/d' | wc -l | xargs)
  i=0
  while read -r line
  do
    ((i=i+1))
    echo -ne "[INFO] Processing ${i}/${lines}: ${line}}\033[0K\r"
    curl --request POST \
      --url ${CAMUNDA_CONSOLE_BASE_URL}/members/${line} \
      --header "Authorization: Bearer ${CAMUNDA_OAUTH_TOKEN}" \
      --header "Content-Type: application/json" \
      --data "{\"orgRoles\": [\"developer\", \"analyst\"]}"
  done < ${args[file]}
  echo "\n\nDONE."
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        teacam_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export CAMUNDA_OAUTH_URL="${CAMUNDA_OAUTH_URL:-https://login.cloud.camunda.io/oauth/token}"
  export CAMUNDA_CONSOLE_BASE_URL="${CAMUNDA_CONSOLE_BASE_URL:-https://api.cloud.camunda.io}"
  export CAMUNDA_CONSOLE_OAUTH_AUDIENCE="${CAMUNDA_CONSOLE_OAUTH_AUDIENCE:-api.cloud.camunda.io}"

  if [[ -z "${CAMUNDA_CONSOLE_CLIENT_ID:-}" ]]; then
    printf "missing required environment variable: CAMUNDA_CONSOLE_CLIENT_ID\n" >&2
    exit 1
  fi
  if [[ -z "${CAMUNDA_CONSOLE_CLIENT_SECRET:-}" ]]; then
    printf "missing required environment variable: CAMUNDA_CONSOLE_CLIENT_SECRET\n" >&2
    exit 1
  fi

  # :command.dependencies_filter
  if command -v brew >/dev/null 2>&1; then
    deps['homebrew']="$(command -v brew | head -n1)"
  else
    printf "missing dependency: homebrew\n" >&2
    printf "%s\n" "run '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'" >&2
    exit 1
  fi

  if command -v curl >/dev/null 2>&1; then
    deps['http_client']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: http_client\n" >&2
    printf "%s\n" "run 'brew install curl'" >&2
    exit 1
  fi

  if command -v jq >/dev/null 2>&1; then
    deps['json']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: json\n" >&2
    printf "%s\n" "run 'brew install jq'" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    new-dawn | nd)
      action="new-dawn"
      shift
      teacam_new_dawn_parse_requirements "$@"
      shift $#
      ;;

    users | u)
      action="users"
      shift
      teacam_users_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      teacam_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
teacam_new_dawn_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_new_dawn_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="new-dawn"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['file']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_file_exists "$1") ]]; then
            printf "validation error in %s:\n%s\n" "FILE" "$(validate_file_exists "$1")" >&2
            exit 1
          fi

          args['file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['file']+x} ]]; then
    printf "missing required argument: FILE\nusage: teacam new-dawn FILE\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
teacam_users_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_users_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    list | ls)
      action="list"
      shift
      teacam_users_list_parse_requirements "$@"
      shift $#
      ;;

    delete | del)
      action="delete"
      shift
      teacam_users_delete_parse_requirements "$@"
      shift $#
      ;;

    delete-non-owners)
      action="delete-non-owners"
      shift
      teacam_users_delete_non_owners_parse_requirements "$@"
      shift $#
      ;;

    invite)
      action="invite"
      shift
      teacam_users_invite_parse_requirements "$@"
      shift $#
      ;;

    import)
      action="import"
      shift
      teacam_users_import_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      teacam_users_usage >&2
      exit 1
      ;;

    *)
      action="list"
      teacam_users_list_parse_requirements "$@"
      shift $#
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
teacam_users_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_users_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="users list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
teacam_users_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_users_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="users delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['mail']+x} ]]; then

          args['mail']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['mail']+x} ]]; then
    printf "missing required argument: MAIL\nusage: teacam users delete MAIL\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
teacam_users_delete_non_owners_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_users_delete_non_owners_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="users delete-non-owners"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
teacam_users_invite_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_users_invite_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="users invite"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['mail']+x} ]]; then

          args['mail']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['mail']+x} ]]; then
    printf "missing required argument: MAIL\nusage: teacam users invite MAIL\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
teacam_users_import_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        teacam_users_import_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="users import"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['file']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_file_exists "$1") ]]; then
            printf "validation error in %s:\n%s\n" "FILE" "$(validate_file_exists "$1")" >&2
            exit 1
          fi

          args['file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['file']+x} ]]; then
    printf "missing required argument: FILE\nusage: teacam users import FILE\n" >&2
    exit 1
  fi

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  CAMUNDA_OAUTH_TOKEN=$(curl -s -f --request POST \
    --url ${CAMUNDA_OAUTH_URL} \
    --header 'Content-Type: application/json' \
    --data "{\"grant_type\":\"client_credentials\", \"audience\":\"${CAMUNDA_CONSOLE_OAUTH_AUDIENCE}\", \"client_id\":\"${CAMUNDA_CONSOLE_CLIENT_ID}\", \"client_secret\":\"${CAMUNDA_CONSOLE_CLIENT_SECRET}\"}" | jq '.access_token')
  CAMUNDA_OAUTH_TOKEN=${CAMUNDA_OAUTH_TOKEN:1:-1}
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export CAMUNDA_OAUTH_URL="${CAMUNDA_OAUTH_URL:-https://login.cloud.camunda.io/oauth/token}"
  export CAMUNDA_CONSOLE_BASE_URL="${CAMUNDA_CONSOLE_BASE_URL:-https://api.cloud.camunda.io}"
  export CAMUNDA_CONSOLE_OAUTH_AUDIENCE="${CAMUNDA_CONSOLE_OAUTH_AUDIENCE:-api.cloud.camunda.io}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "new-dawn") teacam_new_dawn_command ;;
    "users") teacam_users_command ;;
    "users list") teacam_users_list_command ;;
    "users delete") teacam_users_delete_command ;;
    "users delete-non-owners") teacam_users_delete_non_owners_command ;;
    "users invite") teacam_users_invite_command ;;
    "users import") teacam_users_import_command ;;
  esac
}

initialize
run "$@"
